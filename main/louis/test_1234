import tkinter as tk
from tkinter import messagebox
import numpy as np

class SudokuSolver:
    def __init__(self, root):
        self.root = root
        self.root.title("Sudoku Solver")

        self.frame = tk.Frame(self.root)
        self.frame.pack()

        self.sudoku_label = tk.Label(self.frame, text="Sudoku Solver", font=("Helvetica", 20))
        self.sudoku_label.grid(row=0, columnspan=9)

        self.entries = [[0]*9 for _ in range(9)]
        for i in range(9):
            for j in range(9):
                if matrice_a_trou[i][j] != 0:
                    self.entries[i][j] = tk.Label(self.frame, text=str(matrice_a_trou[i][j]), font=("Helvetica", 16))
                else:
                    self.entries[i][j] = tk.Entry(self.frame, width=3, font=("Helvetica", 16))
                self.entries[i][j].grid(row=i+1, column=j)

        self.solve_button = tk.Button(self.frame, text="Solve", font=("Helvetica", 16), command=self.solve_sudoku)
        self.solve_button.grid(row=10, columnspan=9)

    def solve_sudoku(self):
        sudoku = [[int(entry.get()) if isinstance(entry, tk.Entry) else int(entry.cget('text')) for entry in row] for row in self.entries]
        solution = solve_sudoku_recursive(sudoku)
        if solution is not None:
            for i in range(9):
                for j in range(9):
                    if isinstance(self.entries[i][j], tk.Entry):
                        self.entries[i][j].delete(0, tk.END)
                        self.entries[i][j].insert(0, str(solution[i][j]))
            messagebox.showinfo("Sudoku Solver", "Sudoku solved successfully!")
        else:
            messagebox.showerror("Sudoku Solver", "No solution found for this Sudoku.")

def solve_sudoku_recursive(sudoku):
    empty_cell = find_empty_cell(sudoku)
    if not empty_cell:
        return sudoku

    row, col = empty_cell
    for num in range(1, 10):
        if is_valid_move(sudoku, row, col, num):
            sudoku[row][col] = num
            if solve_sudoku_recursive(sudoku):
                return sudoku
            sudoku[row][col] = 0
    return None

def find_empty_cell(sudoku):
    for i in range(9):
        for j in range(9):
            if sudoku[i][j] == 0:
                return (i, j)
    return None

def is_valid_move(sudoku, row, col, num):
    for i in range(9):
        if sudoku[row][i] == num or sudoku[i][col] == num:
            return False

    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if sudoku[start_row + i][start_col + j] == num:
                return False

    return True

if __name__ == "__main__":
    matrice_a_trou = np.array([
        [5, 0, 7, 2, 0, 8, 6, 0, 4], [0, 0, 1, 0, 0, 6, 0, 8, 0], [0, 0, 0, 3, 9, 0, 0, 7, 5],
        [0, 0, 0, 1, 0, 0, 9, 7, 0], [0, 1, 3, 6, 0, 4, 8, 5, 0], [0, 5, 2, 0, 0, 3, 0, 0, 0],
        [3, 5, 0, 0, 4, 2, 0, 0, 0], [0, 4, 0, 1, 0, 0, 3, 0, 0], [2, 0, 7, 8, 0, 9, 0, 0, 1]
    ])

    root = tk.Tk()
    app = SudokuSolver(root)
    root.mainloop()
